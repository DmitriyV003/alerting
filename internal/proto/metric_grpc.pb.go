// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: metric.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	GetMetricValueByTypeAndName(ctx context.Context, in *GetMetricValueByTypeAndNameRequest, opts ...grpc.CallOption) (*GetMetricValueByTypeAndNameResponse, error)
	UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	GetMetricByTypeAndName(ctx context.Context, in *GetMetricByTypeAndNameRequest, opts ...grpc.CallOption) (*GetMetricByTypeAndNameResponse, error)
	UpdateMetricsCollection(ctx context.Context, in *UpdateMetricsCollectionRequest, opts ...grpc.CallOption) (*UpdateMetricsCollectionResponse, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetMetricValueByTypeAndName(ctx context.Context, in *GetMetricValueByTypeAndNameRequest, opts ...grpc.CallOption) (*GetMetricValueByTypeAndNameResponse, error) {
	out := new(GetMetricValueByTypeAndNameResponse)
	err := c.cc.Invoke(ctx, "/proto.Metrics/GetMetricValueByTypeAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/proto.Metrics/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) GetMetricByTypeAndName(ctx context.Context, in *GetMetricByTypeAndNameRequest, opts ...grpc.CallOption) (*GetMetricByTypeAndNameResponse, error) {
	out := new(GetMetricByTypeAndNameResponse)
	err := c.cc.Invoke(ctx, "/proto.Metrics/GetMetricByTypeAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetricsCollection(ctx context.Context, in *UpdateMetricsCollectionRequest, opts ...grpc.CallOption) (*UpdateMetricsCollectionResponse, error) {
	out := new(UpdateMetricsCollectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Metrics/UpdateMetricsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	GetMetricValueByTypeAndName(context.Context, *GetMetricValueByTypeAndNameRequest) (*GetMetricValueByTypeAndNameResponse, error)
	UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error)
	GetMetricByTypeAndName(context.Context, *GetMetricByTypeAndNameRequest) (*GetMetricByTypeAndNameResponse, error)
	UpdateMetricsCollection(context.Context, *UpdateMetricsCollectionRequest) (*UpdateMetricsCollectionResponse, error)
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) GetMetricValueByTypeAndName(context.Context, *GetMetricValueByTypeAndNameRequest) (*GetMetricValueByTypeAndNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricValueByTypeAndName not implemented")
}
func (UnimplementedMetricsServer) UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedMetricsServer) GetMetricByTypeAndName(context.Context, *GetMetricByTypeAndNameRequest) (*GetMetricByTypeAndNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricByTypeAndName not implemented")
}
func (UnimplementedMetricsServer) UpdateMetricsCollection(context.Context, *UpdateMetricsCollectionRequest) (*UpdateMetricsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsCollection not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_GetMetricValueByTypeAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricValueByTypeAndNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetricValueByTypeAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Metrics/GetMetricValueByTypeAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetricValueByTypeAndName(ctx, req.(*GetMetricValueByTypeAndNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Metrics/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetric(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_GetMetricByTypeAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricByTypeAndNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GetMetricByTypeAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Metrics/GetMetricByTypeAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GetMetricByTypeAndName(ctx, req.(*GetMetricByTypeAndNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetricsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetricsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Metrics/UpdateMetricsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetricsCollection(ctx, req.(*UpdateMetricsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricValueByTypeAndName",
			Handler:    _Metrics_GetMetricValueByTypeAndName_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _Metrics_UpdateMetric_Handler,
		},
		{
			MethodName: "GetMetricByTypeAndName",
			Handler:    _Metrics_GetMetricByTypeAndName_Handler,
		},
		{
			MethodName: "UpdateMetricsCollection",
			Handler:    _Metrics_UpdateMetricsCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}
